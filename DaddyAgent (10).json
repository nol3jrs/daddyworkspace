{
  "name": "DaddyAgent",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1808,
        160
      ],
      "id": "REDACTED",
      "name": "Telegram Trigger",
      "webhookId": "16d64522-2814-4074-9b7c-b19052d53b40",
      "alwaysOutputData": true,
      "credentials": {
        "telegramApi": {
          "id": "REDACTED",
          "name": "Telegram account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "REDACTED",
              "name": "memory_limit",
              "value": "={{ Math.min(Math.max(Number($json.message.text.startsWith('/setlimit') ? ($json.message.text.split(' ')[1].match(/^[0-9]+$/) ? $json.message.text.split(' ')[1] : 20) : 20) || 20, 1), 50) }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1664,
        80
      ],
      "id": "REDACTED",
      "name": "Set Limit Value",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO memory_limit_config (chat_id, memory_limit) VALUES ({{ $('Telegram Trigger').item.json.message.chat.id }}, {{ $('Set Limit Value').item.json.memory_limit }}) ON CONFLICT (chat_id) DO UPDATE SET memory_limit = EXCLUDED.memory_limit, timestamp = CURRENT_TIMESTAMP;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1520,
        80
      ],
      "id": "REDACTED",
      "name": "Set Persistent Limit",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "REDACTED",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT memory_limit FROM memory_limit_config WHERE chat_id = $1 ORDER BY timestamp DESC LIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1360,
        80
      ],
      "id": "REDACTED",
      "name": "Load Persistent Limit",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "REDACTED",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT STRING_AGG(CONCAT(role, ': ', content), '\\n' ORDER BY timestamp ASC) AS system_prompt \nFROM (SELECT role, content, timestamp FROM core_memory \n      WHERE content IS NOT NULL AND content != '' AND content != 'undefined' \n      ORDER BY timestamp DESC LIMIT {{ $('Load Persistent Limit').item.json.memory_limit || 20 }}) AS sub",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1200,
        80
      ],
      "id": "REDACTED",
      "name": "Postgress Memory Loader",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "REDACTED",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "REDACTED",
              "name": "Original Message",
              "value": "={{ $('Telegram Trigger').item.json.message.text }}",
              "type": "string"
            },
            {
              "id": "REDACTED",
              "name": "system_prompt",
              "value": "={{ $json.system_prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -992,
        -16
      ],
      "id": "REDACTED",
      "name": "Memory Rebuild",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger').item.json.message.text }}",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $('Memory Rebuild').item.json.system_prompt }}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -672,
        -144
      ],
      "id": "REDACTED",
      "name": "Basic LLM Chain",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "=grok-4-0709",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatXAiGrok",
      "typeVersion": 1,
      "position": [
        -608,
        80
      ],
      "id": "REDACTED",
      "name": "xAI Grok Chat Model",
      "credentials": {
        "xAiApi": {
          "id": "REDACTED",
          "name": "xAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "REDACTED",
              "name": "text",
              "value": "={{ $('Basic LLM Chain').item.json.text.replace(/\\s*This message was sent automatically with n8n\\s*/g, '') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -352,
        -112
      ],
      "id": "REDACTED",
      "name": "Debug LLM Output",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text.replace(/\\s*This message was sent automatically with n8n\\s*/g, '') + '||CLEAN||' }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -128,
        -112
      ],
      "id": "REDACTED",
      "name": "Send a text message",
      "webhookId": "b5ce390b-0482-43a5-8c0b-a673edbcbd4a",
      "alwaysOutputData": true,
      "credentials": {
        "telegramApi": {
          "id": "REDACTED",
          "name": "Telegram account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core_memory (role, content) VALUES ('assistant', '{{ $('Debug Assistant Input').item.json.assistant_text || '' }}');",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -80,
        224
      ],
      "id": "REDACTED",
      "name": "Postgres - Assistant Insert",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "REDACTED",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core_memory (role, content) VALUES ('user', $1);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1152,
        368
      ],
      "id": "REDACTED",
      "name": "Postgres - User Insert",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "REDACTED",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "REDACTED",
              "name": "=assistant_text",
              "value": "={{ $json.result.text.replace(/\\n*This message was sent automatically with n8n/g, '').replace(/'/g, \"''\") || 'No text available' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -288,
        224
      ],
      "id": "REDACTED",
      "name": "Debug Assistant Input",
      "alwaysOutputData": true,
      "executeOnce": false,
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "xAI Grok Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Set Limit Value",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres - User Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Limit Value": {
      "main": [
        [
          {
            "node": "Set Persistent Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Persistent Limit": {
      "main": [
        [
          {
            "node": "Load Persistent Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Persistent Limit": {
      "main": [
        [
          {
            "node": "Postgress Memory Loader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgress Memory Loader": {
      "main": [
        [
          {
            "node": "Memory Rebuild",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory Rebuild": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Debug LLM Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug LLM Output": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Debug Assistant Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Assistant Input": {
      "main": [
        [
          {
            "node": "Postgres - Assistant Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Chicago",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "bIcur3RnHIwhbQrz"
  },
  "versionId": "e7bd47d3-df70-44a7-bdff-1eb7e96c0b5b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8a23f4a414eab2511e2d449872efcd21e85a0679af7fc702f715235be7579732"
  },
  "id": "REDACTED",
  "tags": []
}